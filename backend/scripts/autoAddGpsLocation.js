const mongoose = require('mongoose');
const User = require('../models/User');
require('dotenv').config({ path: './env.development' });

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡∏∏‡πà‡∏°‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢
const generateRandomLocationInThailand = () => {
  // ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢ (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì)
  const thailandBounds = {
    north: 20.465, // ‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏™‡∏∏‡∏î
    south: 5.612,  // ‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î‡πÉ‡∏ï‡πâ‡∏™‡∏∏‡∏î
    east: 105.639, // ‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡∏™‡∏∏‡∏î
    west: 97.344   // ‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å‡∏™‡∏∏‡∏î
  };

  const lat = Math.random() * (thailandBounds.north - thailandBounds.south) + thailandBounds.south;
  const lng = Math.random() * (thailandBounds.east - thailandBounds.west) + thailandBounds.west;

  return {
    lat: parseFloat(lat.toFixed(6)),
    lng: parseFloat(lng.toFixed(6))
  };
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏° gpsLocation ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö user ‡πÉ‡∏´‡∏°‡πà
const addGpsLocationToNewUsers = async () => {
  try {
    // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/love_app');
    console.log('‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

    // ‡∏î‡∏∂‡∏á user ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ gpsLocation
    const usersWithoutLocation = await User.find({
      $or: [
        { gpsLocation: { $exists: false } },
        { gpsLocation: null },
        { 'gpsLocation.lat': { $exists: false } },
        { 'gpsLocation.lng': { $exists: false } }
      ]
    });

    if (usersWithoutLocation.length === 0) {
      console.log('‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ user ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ gpsLocation');
      return;
    }

    console.log(`üìä ‡∏û‡∏ö user ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ gpsLocation: ${usersWithoutLocation.length} ‡∏Ñ‡∏ô`);

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï gpsLocation ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö user ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
    let updatedCount = 0;
    for (const user of usersWithoutLocation) {
      const location = generateRandomLocationInThailand();
      
      await User.findByIdAndUpdate(user._id, {
        gpsLocation: location,
        lastLocationUpdate: new Date()
      });

      updatedCount++;
      console.log(`üìç ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï user: ${user.username || user.email} -> ${location.lat}, ${location.lng}`);
    }

    console.log(`‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï gpsLocation ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${updatedCount} ‡∏Ñ‡∏ô`);

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
  } finally {
    // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    await mongoose.disconnect();
    console.log('üîå ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB');
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å
const autoAddGpsLocation = async () => {
  await addGpsLocationToNewUsers();
};

// ‡∏£‡∏±‡∏ô script ‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
if (require.main === module) {
  autoAddGpsLocation();
}

module.exports = autoAddGpsLocation;
